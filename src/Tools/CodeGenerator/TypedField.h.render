virtual bool TryAdd(int) {return false;}
virtual bool TryAdd(long) {return false;}
virtual bool TryAdd(unsigned int) {return false;}
virtual bool TryAdd(unsigned long) {return false;}
virtual bool TryAdd(float) {return false;}
virtual bool TryAdd(double) {return false;}
virtual bool TryAdd(char) {return false;}
virtual bool TryAdd(unsigned char) {return false;}
virtual bool TryAdd(bool) {return false;}
virtual bool TrySub(int) {return false;}
virtual bool TrySub(long) {return false;}
virtual bool TrySub(unsigned int) {return false;}
virtual bool TrySub(unsigned long) {return false;}
virtual bool TrySub(float) {return false;}
virtual bool TrySub(double) {return false;}
virtual bool TrySub(char) {return false;}
virtual bool TrySub(unsigned char) {return false;}
virtual bool TrySub(bool) {return false;}
virtual bool TryMul(int) {return false;}
virtual bool TryMul(long) {return false;}
virtual bool TryMul(unsigned int) {return false;}
virtual bool TryMul(unsigned long) {return false;}
virtual bool TryMul(float) {return false;}
virtual bool TryMul(double) {return false;}
virtual bool TryMul(char) {return false;}
virtual bool TryMul(unsigned char) {return false;}
virtual bool TryMul(bool) {return false;}
virtual bool TryDiv(int) {return false;}
virtual bool TryDiv(long) {return false;}
virtual bool TryDiv(unsigned int) {return false;}
virtual bool TryDiv(unsigned long) {return false;}
virtual bool TryDiv(float) {return false;}
virtual bool TryDiv(double) {return false;}
virtual bool TryDiv(char) {return false;}
virtual bool TryDiv(unsigned char) {return false;}
virtual bool TryDiv(bool) {return false;}
virtual bool TryMod(int) {return false;}
virtual bool TryMod(long) {return false;}
virtual bool TryMod(unsigned int) {return false;}
virtual bool TryMod(unsigned long) {return false;}
virtual bool TryMod(float) {return false;}
virtual bool TryMod(double) {return false;}
virtual bool TryMod(char) {return false;}
virtual bool TryMod(unsigned char) {return false;}
virtual bool TryMod(bool) {return false;}
virtual bool TryAnd(int) {return false;}
virtual bool TryAnd(long) {return false;}
virtual bool TryAnd(unsigned int) {return false;}
virtual bool TryAnd(unsigned long) {return false;}
virtual bool TryAnd(float) {return false;}
virtual bool TryAnd(double) {return false;}
virtual bool TryAnd(char) {return false;}
virtual bool TryAnd(unsigned char) {return false;}
virtual bool TryAnd(bool) {return false;}
virtual bool TryOr(int) {return false;}
virtual bool TryOr(long) {return false;}
virtual bool TryOr(unsigned int) {return false;}
virtual bool TryOr(unsigned long) {return false;}
virtual bool TryOr(float) {return false;}
virtual bool TryOr(double) {return false;}
virtual bool TryOr(char) {return false;}
virtual bool TryOr(unsigned char) {return false;}
virtual bool TryOr(bool) {return false;}

virtual int Compare(float) const {return -1;}
virtual int Compare(double) const {return -1;}
virtual int Compare(bool) const {return -1;}
virtual int Compare(int) const {return -1;}
virtual int Compare(long) const {return -1;}
virtual int Compare(char) const {return -1;}
virtual int Compare(int) const {return -1;}
virtual int Compare(long) const {return -1;}
virtual int Compare(char) const {return -1;}
virtual int CompareLess(float) const {return -1;}
virtual int CompareLess(double) const {return -1;}
virtual int CompareLess(bool) const {return -1;}
virtual int CompareLess(int) const {return -1;}
virtual int CompareLess(long) const {return -1;}
virtual int CompareLess(char) const {return -1;}
virtual int CompareLess(int) const {return -1;}
virtual int CompareLess(long) const {return -1;}
virtual int CompareLess(char) const {return -1;}
virtual int CompareGreater(float) const {return -1;}
virtual int CompareGreater(double) const {return -1;}
virtual int CompareGreater(bool) const {return -1;}
virtual int CompareGreater(int) const {return -1;}
virtual int CompareGreater(long) const {return -1;}
virtual int CompareGreater(char) const {return -1;}
virtual int CompareGreater(int) const {return -1;}
virtual int CompareGreater(long) const {return -1;}
virtual int CompareGreater(char) const {return -1;}
virtual int CompareLessEqual(float) const {return -1;}
virtual int CompareLessEqual(double) const {return -1;}
virtual int CompareLessEqual(bool) const {return -1;}
virtual int CompareLessEqual(int) const {return -1;}
virtual int CompareLessEqual(long) const {return -1;}
virtual int CompareLessEqual(char) const {return -1;}
virtual int CompareLessEqual(int) const {return -1;}
virtual int CompareLessEqual(long) const {return -1;}
virtual int CompareLessEqual(char) const {return -1;}
virtual int CompareGreaterEqual(float) const {return -1;}
virtual int CompareGreaterEqual(double) const {return -1;}
virtual int CompareGreaterEqual(bool) const {return -1;}
virtual int CompareGreaterEqual(int) const {return -1;}
virtual int CompareGreaterEqual(long) const {return -1;}
virtual int CompareGreaterEqual(char) const {return -1;}
virtual int CompareGreaterEqual(int) const {return -1;}
virtual int CompareGreaterEqual(long) const {return -1;}
virtual int CompareGreaterEqual(char) const {return -1;}

bool TryAdd(int other) {return AddHelper<int>(other);}
bool TryAdd(long other) {return AddHelper<long>(other);}
bool TryAdd(unsigned int other) {return AddHelper<unsigned int>(other);}
bool TryAdd(unsigned long other) {return AddHelper<unsigned long>(other);}
bool TryAdd(float other) {return AddHelper<float>(other);}
bool TryAdd(double other) {return AddHelper<double>(other);}
bool TryAdd(char other) {return AddHelper<char>(other);}
bool TryAdd(unsigned char other) {return AddHelper<unsigned char>(other);}
bool TryAdd(bool other) {return AddHelper<bool>(other);}
bool TrySub(int other) {return AddHelper<int>(other);}
bool TrySub(long other) {return AddHelper<long>(other);}
bool TrySub(unsigned int other) {return AddHelper<unsigned int>(other);}
bool TrySub(unsigned long other) {return AddHelper<unsigned long>(other);}
bool TrySub(float other) {return AddHelper<float>(other);}
bool TrySub(double other) {return AddHelper<double>(other);}
bool TrySub(char other) {return AddHelper<char>(other);}
bool TrySub(unsigned char other) {return AddHelper<unsigned char>(other);}
bool TrySub(bool other) {return AddHelper<bool>(other);}
bool TryMul(int other) {return AddHelper<int>(other);}
bool TryMul(long other) {return AddHelper<long>(other);}
bool TryMul(unsigned int other) {return AddHelper<unsigned int>(other);}
bool TryMul(unsigned long other) {return AddHelper<unsigned long>(other);}
bool TryMul(float other) {return AddHelper<float>(other);}
bool TryMul(double other) {return AddHelper<double>(other);}
bool TryMul(char other) {return AddHelper<char>(other);}
bool TryMul(unsigned char other) {return AddHelper<unsigned char>(other);}
bool TryMul(bool other) {return AddHelper<bool>(other);}
bool TryDiv(int other) {return AddHelper<int>(other);}
bool TryDiv(long other) {return AddHelper<long>(other);}
bool TryDiv(unsigned int other) {return AddHelper<unsigned int>(other);}
bool TryDiv(unsigned long other) {return AddHelper<unsigned long>(other);}
bool TryDiv(float other) {return AddHelper<float>(other);}
bool TryDiv(double other) {return AddHelper<double>(other);}
bool TryDiv(char other) {return AddHelper<char>(other);}
bool TryDiv(unsigned char other) {return AddHelper<unsigned char>(other);}
bool TryDiv(bool other) {return AddHelper<bool>(other);}
bool TryMod(int other) {return AddHelper<int>(other);}
bool TryMod(long other) {return AddHelper<long>(other);}
bool TryMod(unsigned int other) {return AddHelper<unsigned int>(other);}
bool TryMod(unsigned long other) {return AddHelper<unsigned long>(other);}
bool TryMod(float other) {return AddHelper<float>(other);}
bool TryMod(double other) {return AddHelper<double>(other);}
bool TryMod(char other) {return AddHelper<char>(other);}
bool TryMod(unsigned char other) {return AddHelper<unsigned char>(other);}
bool TryMod(bool other) {return AddHelper<bool>(other);}
bool TryAnd(int other) {return AddHelper<int>(other);}
bool TryAnd(long other) {return AddHelper<long>(other);}
bool TryAnd(unsigned int other) {return AddHelper<unsigned int>(other);}
bool TryAnd(unsigned long other) {return AddHelper<unsigned long>(other);}
bool TryAnd(float other) {return AddHelper<float>(other);}
bool TryAnd(double other) {return AddHelper<double>(other);}
bool TryAnd(char other) {return AddHelper<char>(other);}
bool TryAnd(unsigned char other) {return AddHelper<unsigned char>(other);}
bool TryAnd(bool other) {return AddHelper<bool>(other);}
bool TryOr(int other) {return AddHelper<int>(other);}
bool TryOr(long other) {return AddHelper<long>(other);}
bool TryOr(unsigned int other) {return AddHelper<unsigned int>(other);}
bool TryOr(unsigned long other) {return AddHelper<unsigned long>(other);}
bool TryOr(float other) {return AddHelper<float>(other);}
bool TryOr(double other) {return AddHelper<double>(other);}
bool TryOr(char other) {return AddHelper<char>(other);}
bool TryOr(unsigned char other) {return AddHelper<unsigned char>(other);}
bool TryOr(bool other) {return AddHelper<bool>(other);}


        int Compare(float other) const{return CompareHelper(other);}
        int Compare(double other) const{return CompareHelper(other);}
        int Compare(bool other) const{return CompareHelper(other);}
        int Compare(int other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned int)other);
            else
                return CompareHelper(other);
        }
        int Compare(long other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned long)other);
            else
                return CompareHelper(other);
        }
        int Compare(char other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned char)other);
            else
                return CompareHelper(other);
        }
        int Compare(unsigned int other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((int)other);
        }
        int Compare(unsigned long other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((long)other);
        }
        int Compare(unsigned char other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((char)other);
        }
        int CompareLess(float other) const{return CompareLessHelper(other);}
        int CompareLess(double other) const{return CompareLessHelper(other);}
        int CompareLess(bool other) const{return CompareLessHelper(other);}
        int CompareLess(int other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned int)other);
            else
                return CompareHelper(other);
        }
        int CompareLess(long other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned long)other);
            else
                return CompareHelper(other);
        }
        int CompareLess(char other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned char)other);
            else
                return CompareHelper(other);
        }
        int CompareLess(unsigned int other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((int)other);
        }
        int CompareLess(unsigned long other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((long)other);
        }
        int CompareLess(unsigned char other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((char)other);
        }
        int CompareGreater(float other) const{return CompareGreaterHelper(other);}
        int CompareGreater(double other) const{return CompareGreaterHelper(other);}
        int CompareGreater(bool other) const{return CompareGreaterHelper(other);}
        int CompareGreater(int other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned int)other);
            else
                return CompareHelper(other);
        }
        int CompareGreater(long other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned long)other);
            else
                return CompareHelper(other);
        }
        int CompareGreater(char other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned char)other);
            else
                return CompareHelper(other);
        }
        int CompareGreater(unsigned int other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((int)other);
        }
        int CompareGreater(unsigned long other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((long)other);
        }
        int CompareGreater(unsigned char other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((char)other);
        }
        int CompareLessEqual(float other) const{return CompareLessEqualHelper(other);}
        int CompareLessEqual(double other) const{return CompareLessEqualHelper(other);}
        int CompareLessEqual(bool other) const{return CompareLessEqualHelper(other);}
        int CompareLessEqual(int other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned int)other);
            else
                return CompareHelper(other);
        }
        int CompareLessEqual(long other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned long)other);
            else
                return CompareHelper(other);
        }
        int CompareLessEqual(char other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned char)other);
            else
                return CompareHelper(other);
        }
        int CompareLessEqual(unsigned int other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((int)other);
        }
        int CompareLessEqual(unsigned long other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((long)other);
        }
        int CompareLessEqual(unsigned char other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((char)other);
        }
        int CompareGreaterEqual(float other) const{return CompareGreaterEqualHelper(other);}
        int CompareGreaterEqual(double other) const{return CompareGreaterEqualHelper(other);}
        int CompareGreaterEqual(bool other) const{return CompareGreaterEqualHelper(other);}
        int CompareGreaterEqual(int other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned int)other);
            else
                return CompareHelper(other);
        }
        int CompareGreaterEqual(long other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned long)other);
            else
                return CompareHelper(other);
        }
        int CompareGreaterEqual(char other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper((unsigned char)other);
            else
                return CompareHelper(other);
        }
        int CompareGreaterEqual(unsigned int other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((int)other);
        }
        int CompareGreaterEqual(unsigned long other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((long)other);
        }
        int CompareGreaterEqual(unsigned char other) const
        {
            constexpr bool is_unsigned = std::is_unsigned<T>::value;
            if constexpr(is_unsigned)
                return CompareHelper(other);
            else
                return CompareHelper((char)other);
        }